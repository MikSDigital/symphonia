<?php
require_once dirname(__FILE__).'/../../../bootstrap.php';
require_once dirname(__FILE__).'/../../../ControllerTestCase.php';

/**
 * Test class for Admin_Model_News.
 * Generated by PHPUnit on 2010-05-23 at 14:25:11.
 */
class Admin_Model_NewsTest extends ControllerTestCase
{
    /**
     * @var Admin_Model_News
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        parent::setUp();
        $this->object = new Admin_Model_News;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
    }
    /**
     * @expectedException Zend_Exception
     */
    public function testCannotSetMapperPropertyInSetter()
    {
        $this->object->mapper = 'Admin_Model_NewsMapper';
    }
    /**
     *
     * @expectedException Zend_Exception
     */
    public function testCannotGetMapperPropertyInGetter()
    {
        return $this->object->mapper;
    }

    public function testSetterMethod()
    {
        $this->object->Id = 2;
        $this->assertEquals(2, $this->object->getId());

        $this->object->Title = 'test';
        $this->assertEquals('test', $this->object->getTitle());

        $this->object->ShortDescription = 'my short description';
        $this->assertEquals('my short description', $this->object->getShortDescription());

        $this->object->DetailDescription = 'my detail description';
        $this->assertEquals('my detail description', $this->object->getDetailDescription());

        $this->object->Published = 1;
        $this->assertEquals(1, $this->object->getPublished());

        $this->object->CreatedAt = '2010-05-23 14:25:11';
        $this->assertEquals('2010-05-23 14:25:11', $this->object->getCreatedAt());

        $this->object->UpdatedAt = '2010-05-23 14:25:11';
        $this->assertEquals('2010-05-23 14:25:11', $this->object->getUpdatedAt());

        $this->object->PublishedAt = '2010-05-23 14:25:11';
        $this->assertEquals('2010-05-23 14:25:11', $this->object->getPublishedAt());
    }

    public function testGetterMethod()
    {
        $this->object->Id = 2;
        $this->assertEquals(2, $this->object->Id);

        $this->object->Title = 'test';
        $this->assertEquals('test', $this->object->Title);

        $this->object->ShortDescription = 'my short description';
        $this->assertEquals('my short description', $this->object->ShortDescription);

        $this->object->DetailDescription = 'my detail description';
        $this->assertEquals('my detail description', $this->object->DetailDescription);

        $this->object->Published = 1;
        $this->assertEquals(1, $this->object->Published);

        $this->object->CreatedAt = '2010-05-23 14:25:11';
        $this->assertEquals('2010-05-23 14:25:11', $this->object->CreatedAt);

        $this->object->UpdatedAt = '2010-05-23 14:25:11';
        $this->assertEquals('2010-05-23 14:25:11', $this->object->UpdatedAt);

        $this->object->PublishedAt = '2010-05-23 14:25:11';
        $this->assertEquals('2010-05-23 14:25:11', $this->object->PublishedAt);
    }

    public function testSetOptions()
    {
        $data = array(
            'Id' => 2,
            'Title' => 'test',
            'ShortDescription' => 'my short description',
            'DetailDescription' => 'my detail description',
            'Published' => 1,
            'CreatedAt' => '2010-05-23 14:25:11',
            'UpdatedAt' => '2010-05-23 14:25:11',
            'PublishedAt' => '2010-05-23 14:25:11'
        );
        $this->object->setOptions($data);

        $this->assertEquals(2, $this->object->Id);
        $this->assertEquals('test', $this->object->Title);
        $this->assertEquals('my short description', $this->object->ShortDescription);
        $this->assertEquals('my detail description', $this->object->DetailDescription);
        $this->assertEquals(1, $this->object->Published);
        $this->assertEquals('2010-05-23 14:25:11', $this->object->CreatedAt);
        $this->assertEquals('2010-05-23 14:25:11', $this->object->UpdatedAt);
        $this->assertEquals('2010-05-23 14:25:11', $this->object->PublishedAt);

    }

    public function testSetGetId()
    {
        $this->object->setId(2);
        $this->assertEquals(2, $this->object->getId());
    }

    public function testSetGetTitle()
    {
        $this->object->setTitle('test');
        $this->assertEquals('test', $this->object->getTitle());
    }

    public function testSetGetShortDescription()
    {
        $this->object->ShortDescription = 'my short description';
        $this->assertEquals('my short description', $this->object->getShortDescription());
    }

    public function testSetGetDetailDescription()
    {
        $this->object->DetailDescription = 'my detail description';
        $this->assertEquals('my detail description', $this->object->getDetailDescription());
    }

    public function testSetGetPublished()
    {
        $this->object->Published = 1;
        $this->assertEquals(1, $this->object->getPublished());
    }

    public function testSetGetCreatedAt()
    {
        $this->object->CreatedAt = '2010-05-23 14:25:11';
        $this->assertEquals('2010-05-23 14:25:11', $this->object->getCreatedAt());
    }

    public function testSetGetUpdatedAt()
    {
        $this->object->UpdatedAt = '2010-05-23 14:25:11';
        $this->assertEquals('2010-05-23 14:25:11', $this->object->getUpdatedAt());
    }

    public function testSetGetPublishedAt()
    {
        $this->object->PublishedAt = '2010-05-23 14:25:11';
        $this->assertEquals('2010-05-23 14:25:11', $this->object->getPublishedAt());
    }

    public function testMapperIfNull()
    {
        $mapper = $this->object->getMapper();
        $this->assertTrue($mapper instanceof Admin_Model_NewsMapper);
    }

    /**
     * @todo Implement testSave().
     */
    public function testSave() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testFind().
     */
    public function testFind() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testFetchAll().
     */
    public function testFetchAll() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDelete().
     */
    public function testDelete() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }
}
?>
